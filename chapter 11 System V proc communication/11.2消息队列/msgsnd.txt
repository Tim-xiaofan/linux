            MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
            NAME
                  msgrcv,msgsnd − System V message queue operations
            SYNOPSIS
                  #include <sys/types.h>
                  #include <sys/ipc.h>
                  #include <sys/msg.h>
                  int msgsnd(int msqid,const void *msgp,size_t msgsz,int msgﬂg);
                  ssize_t msgrcv(int msqid,void *msgp,size_t msgsz,long msgtyp,
                         int msgﬂg);
            DESCRIPTION
                  The msgsnd() and msgrcv() system calls are used, respectively,tosend messages to, and receive messages
                  from, a System Vmessage queue. The calling process must have write permission on the message queue in
                  order to send a message, and read permission to receive a message.
                  The msgp argument is a pointer to a caller-deﬁned structure of the following general form:
                      struct msgbuf {
                          long mtype;       /* message type, must be > 0 */
                          char mtext[1];    /* message data */
                      };
                  The mtext ﬁeld is an array (or other structure) whose size is speciﬁed bymsgsz,anonnegative integer
                  value. Messages of zero length (i.e., no mtext ﬁeld) are permitted. The mtype ﬁeld must have a strictly
                  positive integer value. This value can be used by the receiving process for message selection (see the
                  description of msgrcv() below).
               msgsnd()
                  The msgsnd() system call appends a copyofthe message pointed to by msgp to the message queue whose
                  identiﬁer is speciﬁed by msqid.
                  If sufﬁcient space is available in the queue, msgsnd() succeeds immediately.The queue capacity is gov-
                  erned by the msg_qbytes ﬁeld in the associated data structure for the message queue. During queue cre-
                  ation this ﬁeld is initialized to MSGMNB bytes, but this limit can be modiﬁed using msgctl(2). A message
                  queue is considered to be full if either of the following conditions is true:
                  * Adding a newmessage to the queue would cause the total number of bytes in the queue to exceed the
                    queue’smaximum size (the msg_qbytes ﬁeld).
                  * Adding another message to the queue would cause the total number of messages in the queue to exceed
                    the queue’smaximum size (the msg_qbytes ﬁeld). This check is necessary to prevent an unlimited num-
                    ber of zero-length messages being placed on the queue. Although such messages contain no data, they
                    nevertheless consume (locked) kernel memory.
                  If insufﬁcient space is available in the queue, then the default behavior of msgsnd() is to block until space
                  becomes available. If IPC_NOWAIT is speciﬁed in msgﬂg,then the call instead fails with the error
                  EAGAIN.
                  Ablockedmsgsnd() call may also fail if:
                  * the queue is removed, in which case the system call fails with errno set to EIDRM;or
                  * asignal is caught, in which case the system call fails with errno set to EINTR;see signal(7). (msgsnd()
                    is neverautomatically restarted after being interrupted by a signal handler,reg ardless of the setting of the
                    SA_RESTARTﬂag when establishing a signal handler.)
                  Upon successful completion the message queue data structure is updated as follows:
                         msg_lspid is set to the process ID of the calling process.
                         msg_qnum is incremented by 1.
            Linux 2017-09-15 1
         MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
                  msg_stime is set to the current time.
           msgrcv()
              The msgrcv() system call removesamessage from the queue speciﬁed by msqid and places it in the buffer
              pointed to by msgp.
              The argument msgsz speciﬁes the maximum size in bytes for the member mtext of the structure pointed to
              by the msgp argument. If the message text has length greater than msgsz,then the behavior depends on
              whether MSG_NOERROR is speciﬁed in msgﬂg.If MSG_NOERROR is speciﬁed, then the message
              text will be truncated (and the truncated part will be lost); ifMSG_NOERRORis not speciﬁed, then the
              message isn’tremovedfrom the queue and the system call fails returning −1 with errno set to E2BIG.
              Unless MSG_COPYis speciﬁed in msgﬂg (see below), the msgtyp argument speciﬁes the type of message
              requested, as follows:
              * If msgtyp is 0, then the ﬁrst message in the queue is read.
              * If msgtyp is greater than 0, then the ﬁrst message in the queue of typemsgtypis read, unless
               MSG_EXCEPTwasspeciﬁed in msgﬂg,inwhich case the ﬁrst message in the queue of type not equal
               to msgtyp will be read.
              * If msgtyp is less than 0, then the ﬁrst message in the queue with the lowest type less than or equal to the
               absolute value of msgtyp will be read.
              The msgﬂg argument is a bit mask constructed by ORing together zero or more of the following ﬂags:
              IPC_NOWAIT
                  Return immediately if no message of the requested type is in the queue. The system call fails with
                  errno set to ENOMSG.
              MSG_COPY(since Linux 3.8)
                  Nondestructively fetch a copyofthe message at the ordinal position in the queue speciﬁed by msg-
                  typ (messages are considered to be numbered starting at 0).
                  This ﬂag must be speciﬁed in conjunction withIPC_NOWAIT,with the result that, if there is no
                  message available at the givenposition, the call fails immediately with the error ENOMSG.
                  Because theyalter the meaning of msgtyp in orthogonal ways, MSG_COPY and MSG_EXCEPT
                  may not both be speciﬁed in msgﬂg.
                  The MSG_COPYﬂag was added for the implementation of the kernel checkpoint-restore facility
                  and is available only if the kernel was built with the CONFIG_CHECKPOINT_RESTORE
                  option.
              MSG_EXCEPT
                  Used with msgtyp greater than 0 to read the ﬁrst message in the queue with message type that dif-
                  fers from msgtyp.
              MSG_NOERROR
                  To truncate the message text if longer than msgsz bytes.
              If no message of the requested type is available andIPC_NOWAITisn’tspeciﬁed in msgﬂg,the calling
              process is blocked until one of the following conditions occurs:
              * Amessage of the desired type is placed in the queue.
              * The message queue is removedfrom the system. In this case, the system call fails with errno set to
               EIDRM.
              * The calling process catches a signal. In this case, the system call fails with errno set to EINTR.
               (msgrcv() is neverautomatically restarted after being interrupted by a signal handler,reg ardless of the
               setting of the SA_RESTART ﬂag when establishing a signal handler.)
              Upon successful completion the message queue data structure is updated as follows:
                  msg_lrpid is set to the process ID of the calling process.
         Linux 2017-09-15 2
          MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
                    msg_qnum is decremented by 1.
                    msg_rtime is set to the current time.
          RETURN VALUE
               On failure both functions return −1 with errno indicating the error,otherwise msgsnd() returns 0 and
               msgrcv() returns the number of bytes actually copied into the mtext array.
          ERRORS
               Whenmsgsnd() fails, errno will be set to one among the following values:
               EACCES
                    The calling process does not have write permission on the message queue, and does not have the
                    CAP_IPC_OWNERcapability.
               EAGAIN
                    The message can’tbesent due to the msg_qbytes limit for the queue and IPC_NOWAIT was
                    speciﬁed in msgﬂg.
               EFAULT
                    The address pointed to by msgp isn’taccessible.
               EIDRM
                    The message queue was removed.
               EINTR
                    Sleeping on a full message queue condition, the process caught a signal.
               EINVAL
                    Invalid msqid value, or nonpositive mtype value, or invalid msgsz value (less than 0 or greater than
                    the system value MSGMAX).
               ENOMEM
                    The system does not have enough memory to makeacopyofthe message pointed to by msgp.
               Whenmsgrcv() fails, errno will be set to one among the following values:
               E2BIG The message text length is greater than msgsz and MSG_NOERROR isn’tspeciﬁed in msgﬂg.
               EACCES
                    The calling process does not have read permission on the message queue, and does not have the
                    CAP_IPC_OWNERcapability in the user namespace that governs its IPC namespace.
               EFAULT
                    The address pointed to by msgp isn’taccessible.
               EIDRM
                    While the process was sleeping to receive a message, the message queue was removed.
               EINTR
                    While the process was sleeping to receive a message, the process caught a signal; see signal(7).
               EINVAL
                    msqid wasinv alid, or msgsz wasless than 0.
               EINVAL(since Linux 3.14)
                    msgﬂg speciﬁed MSG_COPY,but notIPC_NOWAIT.
               EINVAL(since Linux 3.14)
                    msgﬂg speciﬁed both MSG_COPYandMSG_EXCEPT.
               ENOMSG
                    IPC_NOWAITwasspeciﬁed in msgﬂg and no message of the requested type existed on the mes-
                    sage queue.
          Linux 2017-09-15 3
            MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
                  ENOMSG
                        IPC_NOWAITandMSG_COPYwere speciﬁed in msgﬂg and the queue contains less than msg-
                        typ messages.
                  ENOSYS(since Linux 3.8)
                         MSG_COPY wasspeciﬁed inmsgﬂg,and this kernel was conﬁgured without CONFIG_CHECK-
                        POINT_RESTORE.
            CONFORMING TO
                  POSIX.1-2001, POSIX.1-2008, SVr4.
                  The MSG_EXCEPTandMSG_COPYﬂags are Linux-speciﬁc; their deﬁnitions can be obtained by deﬁn-
                  ing the _GNU_SOURCEfeature test macro.
            NOTES
                  The inclusion of <sys/types.h> and <sys/ipc.h> isn’trequired on Linux or by anyversion of POSIX. How-
                  ev er, some old implementations required the inclusion of these header ﬁles, and the SVID also documented
                  their inclusion. Applications intended to be portable to such old systems may need to include these header
                  ﬁles.
                  The msgp argument is declared as struct msgbuf * in glibc 2.0 and 2.1. It is declared as void * in glibc 2.2
                  and later,asrequired by SUSv2 and SUSv3.
                  The following limits on message queue resources affect the msgsnd() call:
                  MSGMAX
                        Maximum size of a message text, in bytes (default value: 8192 bytes). On Linux, this limit can be
                        read and modiﬁed via /proc/sys/kernel/msgmax.
                  MSGMNB
                        Maximum number of bytes that can be held in a message queue (default value: 16384 bytes). On
                        Linux, this limit can be read and modiﬁed via/proc/sys/kernel/msgmnb.Aprivileged process
                        (Linux: a process with the CAP_SYS_RESOURCE capability) can increase the size of a message
                        queue beyond MSGMNBusing themsgctl(2)IPC_SEToperation.
                  The implementation has no intrinsic system-wide limits on the number of message headers (MSGTQL)
                  and the number of bytes in the message pool (MSGPOOL).
            BUGS
                  In Linux 3.13 and earlier,if msgrcv() was called with the MSG_COPY ﬂag, but without IPC_NOWAIT,
                  and the message queue contained less than msgtyp messages, then the call would block until the next mes-
                  sage is written to the queue. At that point, the call would return a copyofthe message, regardless of
                  whether that message was at the ordinal position msgtyp.This bug is ﬁxed in Linux 3.14.
                  Specifying both MSG_COPY and MSC_EXCEPT in msgﬂg is a logical error (since these ﬂags impose
                  different interpretations on msgtyp). In Linux 3.13 and earlier,this error was not diagnosed by msgrcv().
                  This bug is ﬁxed in Linux 3.14.
            EXAMPLE
                  The program belowdemonstrates the use of msgsnd() and msgrcv().
                  The example program is ﬁrst run with the −s option to send a message and then run again with the−r
                  option to receive a message.
                  The following shell session shows a sample run of the program:
                      $ ./a.out −s
                      sent: a message at Wed Mar  416:25:45 2015
                      $ ./a.out −r
                      message received: a message at Wed Mar  416:25:45 2015
            Linux 2017-09-15 4
            MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
               Program source
                  #include <stdio.h>
                  #include <stdlib.h>
                  #include <string.h>
                  #include <time.h>
                  #include <unistd.h>
                  #include <errno.h>
                  #include <sys/types.h>
                  #include <sys/ipc.h>
                  #include <sys/msg.h>
                  struct msgbuf {
                      long mtype;
                      char mtext[80];
                  };
                  static void
                  usage(char *prog_name, char *msg)
                  {
                      if (msg != NULL)
                          fputs(msg, stderr);
                      fprintf(stderr, "Usage: %s [options]\n", prog_name);
                      fprintf(stderr, "Options are:\n");
                      fprintf(stderr, "−s        send message using msgsnd()\n");
                      fprintf(stderr, "−r        read message using msgrcv()\n");
                      fprintf(stderr, "−t        message type (default is 1)\n");
                      fprintf(stderr, "−k        message queue key (default is 1234)\n");
                      exit(EXIT_FAILURE);
                  }
                  static void
                  send_msg(int qid, int msgtype)
                  {
                      struct msgbuf msg;
                      time_t t;
                      msg.mtype = msgtype;
                      time(&t);
                      snprintf(msg.mtext, sizeof(msg.mtext), "a message at %s",
                              ctime(&t));
                      if (msgsnd(qid, (void *) &msg, sizeof(msg.mtext),
                                  IPC_NOWAIT) == −1) {
                          perror("msgsnd error");
                          exit(EXIT_FAILURE);
                      }
                      printf("sent: %s\n", msg.mtext);
                  }
                  static void
                  get_msg(int qid, int msgtype)
            Linux 2017-09-15 5
         MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
             {
                struct msgbuf msg;
                if (msgrcv(qid, (void *) &msg, sizeof(msg.mtext), msgtype,
                        MSG_NOERROR | IPC_NOWAIT) == −1) {
                   if (errno != ENOMSG) {
                      perror("msgrcv");
                      exit(EXIT_FAILURE);
                   }
                   printf("No message available for msgrcv()\n");
                }else
                   printf("message received: %s\n", msg.mtext);
             }
             int
             main(int argc, char *argv[])
             {
                int qid, opt;
                int mode = 0;       /* 1 = send, 2 = receive */
                int msgtype = 1;
                int msgkey = 1234;
                while ((opt = getopt(argc, argv, "srt:k:")) != −1) {
                   switch (opt) {
                   case 's':
                      mode = 1;
                      break;
                   case 'r':
                      mode = 2;
                      break;
                   case 't':
                      msgtype = atoi(optarg);
                      if (msgtype <= 0)
                         usage(argv[0], "−t option must be greater than 0\n");
                      break;
                   case 'k':
                      msgkey = atoi(optarg);
                      break;
                   default:
                      usage(argv[0], "Unrecognized option\n");
                   }
                }
                if (mode == 0)
                   usage(argv[0], "must use either −s or −r option\n");
                qid = msgget(msgkey, IPC_CREAT | 0666);
                if (qid == −1) {
                   perror("msgget");
                   exit(EXIT_FAILURE);
                }
                if (mode == 2)
         Linux 2017-09-15 6
          MSGOP(2) LinuxProgrammer’sManual MSGOP(2)
                    get_msg(qid, msgtype);
                 else
                    send_msg(qid, msgtype);
                 exit(EXIT_SUCCESS);
              }
          SEE ALSO
              msgctl(2), msgget(2), capabilities(7), mq_overview(7), svipc(7)
          COLOPHON
              This page is part of release 4.15 of the Linux man-pages project. A description of the project, information
              about reporting bugs, and the latest version of this page, can be found at
              https://www.kernel.org/doc/man−pages/.
          Linux 2017-09-15 7
